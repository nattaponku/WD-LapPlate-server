Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 95,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 10067,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 109,
      [Symbol(triggerId)]: 97
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 95,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 10067,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 109,
      [Symbol(triggerId)]: 97
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 95,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 10067,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 109,
        [Symbol(triggerId)]: 97
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 95,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 10067,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 109,
        [Symbol(triggerId)]: 97
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 95,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 10067,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 109,
        [Symbol(triggerId)]: 97
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 769,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 14470,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 782,
      [Symbol(triggerId)]: 771
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 769,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 14470,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 782,
      [Symbol(triggerId)]: 771
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 769,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 14470,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 782,
        [Symbol(triggerId)]: 771
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 769,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 14470,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 782,
        [Symbol(triggerId)]: 771
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"11054-oFzqgIST1vHQipJcnrd5yR69GLQ"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"11054-oFzqgIST1vHQipJcnrd5yR69GLQ"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 769,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 14470,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 782,
        [Symbol(triggerId)]: 771
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 769,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 14554,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 812,
      [Symbol(triggerId)]: 771
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 769,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 14554,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 812,
      [Symbol(triggerId)]: 771
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 769,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 14554,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 812,
        [Symbol(triggerId)]: 771
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 769,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 14554,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 812,
        [Symbol(triggerId)]: 771
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"11054-oFzqgIST1vHQipJcnrd5yR69GLQ"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"11054-oFzqgIST1vHQipJcnrd5yR69GLQ"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 769,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 14554,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 812,
        [Symbol(triggerId)]: 771
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 769,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 14617,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 843,
      [Symbol(triggerId)]: 771
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 769,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 14617,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 843,
      [Symbol(triggerId)]: 771
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 769,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 14617,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 843,
        [Symbol(triggerId)]: 771
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 769,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 14617,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 843,
        [Symbol(triggerId)]: 771
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"11054-oFzqgIST1vHQipJcnrd5yR69GLQ"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"11054-oFzqgIST1vHQipJcnrd5yR69GLQ"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 769,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 14617,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 843,
        [Symbol(triggerId)]: 771
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1483,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1394007,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1497,
      [Symbol(triggerId)]: 1485
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1483,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1394007,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1497,
      [Symbol(triggerId)]: 1485
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1483,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1394007,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1497,
        [Symbol(triggerId)]: 1485
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1483,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1394007,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1497,
        [Symbol(triggerId)]: 1485
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1483,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1394007,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1497,
        [Symbol(triggerId)]: 1485
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1618,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1466659,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1631,
      [Symbol(triggerId)]: 1620
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1618,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1466659,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1631,
      [Symbol(triggerId)]: 1620
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1618,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1466659,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1631,
        [Symbol(triggerId)]: 1620
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1618,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1466659,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1631,
        [Symbol(triggerId)]: 1620
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"11054-oFzqgIST1vHQipJcnrd5yR69GLQ"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"11054-oFzqgIST1vHQipJcnrd5yR69GLQ"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1618,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1466659,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1631,
        [Symbol(triggerId)]: 1620
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1605,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1466678,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1651,
      [Symbol(triggerId)]: 1607
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1605,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1466678,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1651,
      [Symbol(triggerId)]: 1607
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1605,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1466678,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1651,
        [Symbol(triggerId)]: 1607
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1605,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1466678,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1651,
        [Symbol(triggerId)]: 1607
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1605,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1466678,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1651,
        [Symbol(triggerId)]: 1607
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1618,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1466695,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1671,
      [Symbol(triggerId)]: 1620
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1618,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1466695,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1671,
      [Symbol(triggerId)]: 1620
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1618,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1466695,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1671,
        [Symbol(triggerId)]: 1620
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1618,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1466695,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1671,
        [Symbol(triggerId)]: 1620
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1618,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1466695,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1671,
        [Symbol(triggerId)]: 1620
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1618,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1471022,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1695,
      [Symbol(triggerId)]: 1620
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1618,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1471022,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1695,
      [Symbol(triggerId)]: 1620
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1618,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1471022,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1695,
        [Symbol(triggerId)]: 1620
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1618,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1471022,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1695,
        [Symbol(triggerId)]: 1620
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1618,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1471022,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1695,
        [Symbol(triggerId)]: 1620
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1605,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1471042,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1726,
      [Symbol(triggerId)]: 1607
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1605,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1471042,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1726,
      [Symbol(triggerId)]: 1607
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1605,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1471042,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1726,
        [Symbol(triggerId)]: 1607
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1605,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1471042,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1726,
        [Symbol(triggerId)]: 1607
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-24',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1605,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1471042,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1726,
        [Symbol(triggerId)]: 1607
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-24',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-24',
      path: '/PVDATE/2020-09-24',
      href: '/PVDATE/2020-09-24',
      _raw: '/PVDATE/2020-09-24'
    },
    params: { date: '2020-09-24' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1762,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1475504,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1763,
      [Symbol(triggerId)]: 1762
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1762,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1475504,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1763,
      [Symbol(triggerId)]: 1762
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1762,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1475504,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1763,
        [Symbol(triggerId)]: 1762
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1762,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1475504,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1763,
        [Symbol(triggerId)]: 1762
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-24',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1762,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1475504,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1763,
        [Symbol(triggerId)]: 1762
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-24',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-24',
      path: '/PVDATE/2020-09-24',
      href: '/PVDATE/2020-09-24',
      _raw: '/PVDATE/2020-09-24'
    },
    params: { date: '2020-09-24' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1772,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1475536,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1799,
      [Symbol(triggerId)]: 1774
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1772,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 1475536,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1799,
      [Symbol(triggerId)]: 1774
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1772,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1475536,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1799,
        [Symbol(triggerId)]: 1774
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1772,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1475536,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1799,
        [Symbol(triggerId)]: 1774
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1772,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 1475536,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1799,
        [Symbol(triggerId)]: 1774
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2925,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2575595,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2939,
      [Symbol(triggerId)]: 2927
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2925,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2575595,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2939,
      [Symbol(triggerId)]: 2927
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2925,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2575595,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2939,
        [Symbol(triggerId)]: 2927
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2925,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2575595,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2939,
        [Symbol(triggerId)]: 2927
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2925,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2575595,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2939,
        [Symbol(triggerId)]: 2927
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3129,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2744350,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3143,
      [Symbol(triggerId)]: 3131
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3129,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2744350,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3143,
      [Symbol(triggerId)]: 3131
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3129,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2744350,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3143,
        [Symbol(triggerId)]: 3131
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3129,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2744350,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3143,
        [Symbol(triggerId)]: 3131
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3129,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2744350,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3143,
        [Symbol(triggerId)]: 3131
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3239,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2818839,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3253,
      [Symbol(triggerId)]: 3241
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3239,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2818839,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3253,
      [Symbol(triggerId)]: 3241
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3239,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2818839,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3253,
        [Symbol(triggerId)]: 3241
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3239,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2818839,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3253,
        [Symbol(triggerId)]: 3241
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3239,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2818839,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3253,
        [Symbol(triggerId)]: 3241
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3297,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2824373,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3319,
      [Symbol(triggerId)]: 3299
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3297,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2824373,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3319,
      [Symbol(triggerId)]: 3299
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3297,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2824373,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3319,
        [Symbol(triggerId)]: 3299
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3297,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2824373,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3319,
        [Symbol(triggerId)]: 3299
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3297,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2824373,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3319,
        [Symbol(triggerId)]: 3299
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3293,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2824385,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3339,
      [Symbol(triggerId)]: 3295
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3293,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2824385,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3339,
      [Symbol(triggerId)]: 3295
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3293,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2824385,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3339,
        [Symbol(triggerId)]: 3295
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3293,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2824385,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3339,
        [Symbol(triggerId)]: 3295
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3293,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2824385,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3339,
        [Symbol(triggerId)]: 3295
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3297,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2824397,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3359,
      [Symbol(triggerId)]: 3299
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3297,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2824397,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3359,
      [Symbol(triggerId)]: 3299
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3297,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2824397,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3359,
        [Symbol(triggerId)]: 3299
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3297,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2824397,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3359,
        [Symbol(triggerId)]: 3299
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3297,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2824397,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3359,
        [Symbol(triggerId)]: 3299
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3388,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2830532,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3402,
      [Symbol(triggerId)]: 3390
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3388,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2830532,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3402,
      [Symbol(triggerId)]: 3390
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3388,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2830532,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3402,
        [Symbol(triggerId)]: 3390
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3388,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2830532,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3402,
        [Symbol(triggerId)]: 3390
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3388,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2830532,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3402,
        [Symbol(triggerId)]: 3390
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3472,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2879436,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3486,
      [Symbol(triggerId)]: 3474
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3472,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2879436,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3486,
      [Symbol(triggerId)]: 3474
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3472,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2879436,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3486,
        [Symbol(triggerId)]: 3474
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3472,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2879436,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3486,
        [Symbol(triggerId)]: 3474
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3472,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2879436,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3486,
        [Symbol(triggerId)]: 3474
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3472,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2881220,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3509,
      [Symbol(triggerId)]: 3474
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3472,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2881220,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3509,
      [Symbol(triggerId)]: 3474
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3472,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2881220,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3509,
        [Symbol(triggerId)]: 3474
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3472,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2881220,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3509,
        [Symbol(triggerId)]: 3474
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3472,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2881220,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3509,
        [Symbol(triggerId)]: 3474
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3545,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2884530,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3571,
      [Symbol(triggerId)]: 3547
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3545,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2884530,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3571,
      [Symbol(triggerId)]: 3547
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3545,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2884530,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3571,
        [Symbol(triggerId)]: 3547
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3545,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2884530,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3571,
        [Symbol(triggerId)]: 3547
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3545,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2884530,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3571,
        [Symbol(triggerId)]: 3547
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3558,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2884546,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3591,
      [Symbol(triggerId)]: 3560
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3558,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2884546,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3591,
      [Symbol(triggerId)]: 3560
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3558,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2884546,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3591,
        [Symbol(triggerId)]: 3560
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3558,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2884546,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3591,
        [Symbol(triggerId)]: 3560
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3558,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2884546,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3591,
        [Symbol(triggerId)]: 3560
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3545,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2884561,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3611,
      [Symbol(triggerId)]: 3547
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3545,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2884561,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3611,
      [Symbol(triggerId)]: 3547
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3545,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2884561,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3611,
        [Symbol(triggerId)]: 3547
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3545,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2884561,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3611,
        [Symbol(triggerId)]: 3547
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3545,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2884561,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3611,
        [Symbol(triggerId)]: 3547
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3545,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2886351,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3643,
      [Symbol(triggerId)]: 3547
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3545,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2886351,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3643,
      [Symbol(triggerId)]: 3547
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3545,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2886351,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3643,
        [Symbol(triggerId)]: 3547
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3545,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2886351,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3643,
        [Symbol(triggerId)]: 3547
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3545,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2886351,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3643,
        [Symbol(triggerId)]: 3547
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3675,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2894753,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3689,
      [Symbol(triggerId)]: 3677
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 84
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3675,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 2894753,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3689,
      [Symbol(triggerId)]: 3677
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3675,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2894753,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3689,
        [Symbol(triggerId)]: 3677
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3675,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2894753,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3689,
        [Symbol(triggerId)]: 3677
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NCwidXNlcm5hbWUiOiJzZ3RlY2giLCJnZW5kZXIiOiJtYWxlIiwiZW1haWwiOiJzZ3RlY2hAbnUuYWMudGgiLCJwYXNzd29yZCI6IiQyYSQwOCRPSlhrcmM1N3FITWdRbjcuT2ZOaE1PSDdXYnMucVp2N2gxRWNObVdqSXJ4enJLOVYwTDVGQyIsIm5hbWUiOiJTRyIsImxhc3RuYW1lIjoiVGVjaCIsImFkZHJlc3MiOiJOVSIsImNpdHkiOiJNdWFuZyIsImNvdW50cnkiOiJUaGFpbGFuZCIsInppcENvZGUiOiI2NTAwMCIsImFib3V0IjoiSW50ZXJlc3RlZCBpbiBuZXcgdGVjaG5vbG9neSBmb3IgcmVuZXdhYmxlIGVuZXJneS4iLCJ3b3JrcGxhY2UiOiJTY2hvb2wgb2YgUmVuZXdhYmxlIEVuZXJneSIsInBvc2l0aW9uIjoiRW5naW5lZXIiLCJwcm92aW5jZSI6IlBoaXRzYW51bG9rZSIsInN0YXR1cyI6ImFkbWluIiwiaW1nIjoiaWNfcHJvZmlsZS5wbmciLCJjcmVhdGVkQXQiOiIyMDIxLTAxLTMwVDEwOjUyOjU2LjAzM1oiLCJ1cGRhdGVkQXQiOiIyMDIxLTA0LTE3VDA3OjMyOjQ0Ljk5M1oiLCJpYXQiOjE2MzExNjgyNTksImV4cCI6MTYzMTc3MzA1OX0.ksU8ZkIgLZNtQmc_3Pm7gndbVN3XVt--qesaTbELfx4',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3675,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 2894753,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3689,
        [Symbol(triggerId)]: 3677
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` = 'sgtech@nu.ac.th' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'nattaponk' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
isPasswordValid = true
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 85,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 27649,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 121,
      [Symbol(triggerId)]: 87
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 85,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 27649,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 121,
      [Symbol(triggerId)]: 87
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 85,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 27649,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 121,
        [Symbol(triggerId)]: 87
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 85,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 27649,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 121,
        [Symbol(triggerId)]: 87
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMTg5LCJleHAiOjE2MzE3ODc5ODl9.l0wVoCKNOSd9T6Ddkpwor_2oDj2UIEDFt4DTaFaxpuc',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMTg5LCJleHAiOjE2MzE3ODc5ODl9.l0wVoCKNOSd9T6Ddkpwor_2oDj2UIEDFt4DTaFaxpuc',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 85,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 27649,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 121,
        [Symbol(triggerId)]: 87
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 657,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 31567,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 679,
      [Symbol(triggerId)]: 659
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 657,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 31567,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 679,
      [Symbol(triggerId)]: 659
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 657,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 31567,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 679,
        [Symbol(triggerId)]: 659
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 657,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 31567,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 679,
        [Symbol(triggerId)]: 659
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMTg5LCJleHAiOjE2MzE3ODc5ODl9.l0wVoCKNOSd9T6Ddkpwor_2oDj2UIEDFt4DTaFaxpuc',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMTg5LCJleHAiOjE2MzE3ODc5ODl9.l0wVoCKNOSd9T6Ddkpwor_2oDj2UIEDFt4DTaFaxpuc',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 657,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 31567,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 679,
        [Symbol(triggerId)]: 659
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 653,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 31634,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 699,
      [Symbol(triggerId)]: 655
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 653,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 31634,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 699,
      [Symbol(triggerId)]: 655
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 653,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 31634,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 699,
        [Symbol(triggerId)]: 655
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 653,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 31634,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 699,
        [Symbol(triggerId)]: 655
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMTg5LCJleHAiOjE2MzE3ODc5ODl9.l0wVoCKNOSd9T6Ddkpwor_2oDj2UIEDFt4DTaFaxpuc',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMTg5LCJleHAiOjE2MzE3ODc5ODl9.l0wVoCKNOSd9T6Ddkpwor_2oDj2UIEDFt4DTaFaxpuc',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 653,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 31634,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 699,
        [Symbol(triggerId)]: 655
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 653,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 31692,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 719,
      [Symbol(triggerId)]: 655
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 653,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 31692,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 719,
      [Symbol(triggerId)]: 655
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 653,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 31692,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 719,
        [Symbol(triggerId)]: 655
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 653,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 31692,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 719,
        [Symbol(triggerId)]: 655
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMTg5LCJleHAiOjE2MzE3ODc5ODl9.l0wVoCKNOSd9T6Ddkpwor_2oDj2UIEDFt4DTaFaxpuc',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMTg5LCJleHAiOjE2MzE3ODc5ODl9.l0wVoCKNOSd9T6Ddkpwor_2oDj2UIEDFt4DTaFaxpuc',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 653,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 31692,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 719,
        [Symbol(triggerId)]: 655
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
isPasswordValid = true
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 841,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 130018,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 878,
      [Symbol(triggerId)]: 843
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 841,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 130018,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 878,
      [Symbol(triggerId)]: 843
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 841,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 130018,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 878,
        [Symbol(triggerId)]: 843
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 841,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 130018,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 878,
        [Symbol(triggerId)]: 843
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 841,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 130018,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 878,
        [Symbol(triggerId)]: 843
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1412,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 147396,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1426,
      [Symbol(triggerId)]: 1414
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1412,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 147396,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1426,
      [Symbol(triggerId)]: 1414
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1412,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 147396,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1426,
        [Symbol(triggerId)]: 1414
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1412,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 147396,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1426,
        [Symbol(triggerId)]: 1414
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1412,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 147396,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1426,
        [Symbol(triggerId)]: 1414
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1952,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 154740,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1966,
      [Symbol(triggerId)]: 1954
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1952,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 154740,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1966,
      [Symbol(triggerId)]: 1954
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1952,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 154740,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1966,
        [Symbol(triggerId)]: 1954
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1952,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 154740,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1966,
        [Symbol(triggerId)]: 1954
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1952,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 154740,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1966,
        [Symbol(triggerId)]: 1954
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1952,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 158113,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2497,
      [Symbol(triggerId)]: 1954
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1952,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 158113,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2497,
      [Symbol(triggerId)]: 1954
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1952,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 158113,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2497,
        [Symbol(triggerId)]: 1954
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1952,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 158113,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2497,
        [Symbol(triggerId)]: 1954
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      pragma: 'no-cache',
      'cache-control': 'no-cache',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'Pragma',
      'no-cache',
      'Cache-Control',
      'no-cache',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1952,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 158113,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2497,
        [Symbol(triggerId)]: 1954
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1952,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 162024,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2847,
      [Symbol(triggerId)]: 1954
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1952,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 162024,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2847,
      [Symbol(triggerId)]: 1954
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1952,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 162024,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2847,
        [Symbol(triggerId)]: 1954
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1952,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 162024,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2847,
        [Symbol(triggerId)]: 1954
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1952,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 162024,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2847,
        [Symbol(triggerId)]: 1954
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3376,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 203442,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3390,
      [Symbol(triggerId)]: 3378
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3376,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 203442,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3390,
      [Symbol(triggerId)]: 3378
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3376,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 203442,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3390,
        [Symbol(triggerId)]: 3378
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3376,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 203442,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3390,
        [Symbol(triggerId)]: 3378
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3376,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 203442,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3390,
        [Symbol(triggerId)]: 3378
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3376,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 208187,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3912,
      [Symbol(triggerId)]: 3378
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3376,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 208187,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3912,
      [Symbol(triggerId)]: 3378
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3376,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 208187,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3912,
        [Symbol(triggerId)]: 3378
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3376,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 208187,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3912,
        [Symbol(triggerId)]: 3378
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3376,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 208187,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3912,
        [Symbol(triggerId)]: 3378
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3376,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 211808,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4244,
      [Symbol(triggerId)]: 3378
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3376,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 211808,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4244,
      [Symbol(triggerId)]: 3378
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3376,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 211808,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4244,
        [Symbol(triggerId)]: 3378
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3376,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 211808,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4244,
        [Symbol(triggerId)]: 3378
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3376,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 211808,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4244,
        [Symbol(triggerId)]: 3378
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4787,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 215098,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4800,
      [Symbol(triggerId)]: 4789
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4787,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 215098,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4800,
      [Symbol(triggerId)]: 4789
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4787,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 215098,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4800,
        [Symbol(triggerId)]: 4789
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4787,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 215098,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4800,
        [Symbol(triggerId)]: 4789
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4787,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 215098,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4800,
        [Symbol(triggerId)]: 4789
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4787,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 215143,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4820,
      [Symbol(triggerId)]: 4789
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4787,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 215143,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4820,
      [Symbol(triggerId)]: 4789
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4787,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 215143,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4820,
        [Symbol(triggerId)]: 4789
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4787,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 215143,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4820,
        [Symbol(triggerId)]: 4789
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4787,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 215143,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4820,
        [Symbol(triggerId)]: 4789
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4787,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 215182,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4840,
      [Symbol(triggerId)]: 4789
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4787,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 215182,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4840,
      [Symbol(triggerId)]: 4789
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4787,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 215182,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4840,
        [Symbol(triggerId)]: 4789
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4787,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 215182,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4840,
        [Symbol(triggerId)]: 4789
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4787,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 215182,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4840,
        [Symbol(triggerId)]: 4789
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4922,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 246578,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4935,
      [Symbol(triggerId)]: 4924
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4922,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 246578,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4935,
      [Symbol(triggerId)]: 4924
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4922,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 246578,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4935,
        [Symbol(triggerId)]: 4924
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4922,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 246578,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4935,
        [Symbol(triggerId)]: 4924
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4922,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 246578,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4935,
        [Symbol(triggerId)]: 4924
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4922,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 246622,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4955,
      [Symbol(triggerId)]: 4924
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4922,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 246622,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4955,
      [Symbol(triggerId)]: 4924
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4922,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 246622,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4955,
        [Symbol(triggerId)]: 4924
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4922,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 246622,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4955,
        [Symbol(triggerId)]: 4924
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4922,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 246622,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4955,
        [Symbol(triggerId)]: 4924
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4922,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 246673,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4975,
      [Symbol(triggerId)]: 4924
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4922,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 246673,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4975,
      [Symbol(triggerId)]: 4924
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4922,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 246673,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4975,
        [Symbol(triggerId)]: 4924
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4922,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 246673,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4975,
        [Symbol(triggerId)]: 4924
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzMjkyLCJleHAiOjE2MzE3ODgwOTJ9.ytpoMQyHHkyLsI1Agsru9WK0eyC4giuUWo6fknZGoak',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4922,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 246673,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4975,
        [Symbol(triggerId)]: 4924
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
isPasswordValid = true
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5095,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 344114,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5132,
      [Symbol(triggerId)]: 5097
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5095,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 344114,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5132,
      [Symbol(triggerId)]: 5097
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5095,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 344114,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5132,
        [Symbol(triggerId)]: 5097
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5095,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 344114,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5132,
        [Symbol(triggerId)]: 5097
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5095,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 344114,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5132,
        [Symbol(triggerId)]: 5097
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5685,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 352752,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5698,
      [Symbol(triggerId)]: 5687
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5685,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 352752,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5698,
      [Symbol(triggerId)]: 5687
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5685,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 352752,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5698,
        [Symbol(triggerId)]: 5687
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5685,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 352752,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5698,
        [Symbol(triggerId)]: 5687
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5685,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 352752,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5698,
        [Symbol(triggerId)]: 5687
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5685,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 352804,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5718,
      [Symbol(triggerId)]: 5687
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5685,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 352804,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5718,
      [Symbol(triggerId)]: 5687
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5685,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 352804,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5718,
        [Symbol(triggerId)]: 5687
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5685,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 352804,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5718,
        [Symbol(triggerId)]: 5687
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5685,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 352804,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5718,
        [Symbol(triggerId)]: 5687
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5685,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 352852,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5739,
      [Symbol(triggerId)]: 5687
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5685,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 352852,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5739,
      [Symbol(triggerId)]: 5687
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5685,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 352852,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5739,
        [Symbol(triggerId)]: 5687
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5685,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 352852,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5739,
        [Symbol(triggerId)]: 5687
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5685,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 352852,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5739,
        [Symbol(triggerId)]: 5687
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5770,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 360421,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5784,
      [Symbol(triggerId)]: 5772
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5770,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 360421,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5784,
      [Symbol(triggerId)]: 5772
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5770,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 360421,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5784,
        [Symbol(triggerId)]: 5772
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5770,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 360421,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5784,
        [Symbol(triggerId)]: 5772
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTgzNTA2LCJleHAiOjE2MzE3ODgzMDZ9.Sd0VF4woCEZE5yaGYCGZzfce-RUNPq8Zq6NnLlMIabw',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5770,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 360421,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5784,
        [Symbol(triggerId)]: 5772
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 122,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 64496,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 136,
      [Symbol(triggerId)]: 124
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 122,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 64496,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 136,
      [Symbol(triggerId)]: 124
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 122,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 64496,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 136,
        [Symbol(triggerId)]: 124
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 122,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 64496,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 136,
        [Symbol(triggerId)]: 124
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk2MDc1LCJleHAiOjE2MzE4MDA4NzV9.dpkeO0f8y-F30iCwxC2pZmGJJwigFFcAE_fRN0AqPYU',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk2MDc1LCJleHAiOjE2MzE4MDA4NzV9.dpkeO0f8y-F30iCwxC2pZmGJJwigFFcAE_fRN0AqPYU',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 122,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 64496,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 136,
        [Symbol(triggerId)]: 124
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
isPasswordValid = true
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 663,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 74065,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 701,
      [Symbol(triggerId)]: 665
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 663,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 74065,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 701,
      [Symbol(triggerId)]: 665
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 663,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 74065,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 701,
        [Symbol(triggerId)]: 665
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 663,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 74065,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 701,
        [Symbol(triggerId)]: 665
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MTk3LCJleHAiOjE2MzE4MDI5OTd9.Y_Kymypy2HwGyNTg30CLEhxAUXWXhklKbe6r3GpsVsc',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MTk3LCJleHAiOjE2MzE4MDI5OTd9.Y_Kymypy2HwGyNTg30CLEhxAUXWXhklKbe6r3GpsVsc',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 663,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 74065,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 701,
        [Symbol(triggerId)]: 665
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
isPasswordValid = true
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1238,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 94399,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1274,
      [Symbol(triggerId)]: 1240
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1238,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 94399,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1274,
      [Symbol(triggerId)]: 1240
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1238,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 94399,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1274,
        [Symbol(triggerId)]: 1240
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1238,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 94399,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1274,
        [Symbol(triggerId)]: 1240
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1238,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 94399,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1274,
        [Symbol(triggerId)]: 1240
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2133,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 407860,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2146,
      [Symbol(triggerId)]: 2135
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2133,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 407860,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2146,
      [Symbol(triggerId)]: 2135
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2133,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 407860,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2146,
        [Symbol(triggerId)]: 2135
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2133,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 407860,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2146,
        [Symbol(triggerId)]: 2135
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2133,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 407860,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2146,
        [Symbol(triggerId)]: 2135
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2120,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 407930,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2166,
      [Symbol(triggerId)]: 2122
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2120,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 407930,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2166,
      [Symbol(triggerId)]: 2122
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2120,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 407930,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2166,
        [Symbol(triggerId)]: 2122
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2120,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 407930,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2166,
        [Symbol(triggerId)]: 2122
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2120,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 407930,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2166,
        [Symbol(triggerId)]: 2122
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2120,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 407987,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2186,
      [Symbol(triggerId)]: 2122
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2120,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 407987,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2186,
      [Symbol(triggerId)]: 2122
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2120,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 407987,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2186,
        [Symbol(triggerId)]: 2122
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2120,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 407987,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2186,
        [Symbol(triggerId)]: 2122
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2120,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 407987,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2186,
        [Symbol(triggerId)]: 2122
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2397,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 595930,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2398,
      [Symbol(triggerId)]: 2397
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 2,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 2397,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [Timeout],
      _idleNext: [TimersList],
      _idleStart: 595930,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2398,
      [Symbol(triggerId)]: 2397
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2397,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [Timeout],
        _idleNext: [TimersList],
        _idleStart: 595930,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2398,
        [Symbol(triggerId)]: 2397
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2397,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [Timeout],
        _idleNext: [TimersList],
        _idleStart: 595930,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2398,
        [Symbol(triggerId)]: 2397
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'sec-ch-ua-mobile': '?0',
      'sec-ch-ua-platform': '"Windows"',
      'upgrade-insecure-requests': '1',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'sec-fetch-site': 'none',
      'sec-fetch-mode': 'navigate',
      'sec-fetch-user': '?1',
      'sec-fetch-dest': 'document',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'sec-ch-ua-mobile',
      '?0',
      'sec-ch-ua-platform',
      '"Windows"',
      'Upgrade-Insecure-Requests',
      '1',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'Accept',
      'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
      'Sec-Fetch-Site',
      'none',
      'Sec-Fetch-Mode',
      'navigate',
      'Sec-Fetch-User',
      '?1',
      'Sec-Fetch-Dest',
      'document',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/users',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 2397,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [Timeout],
        _idleNext: [TimersList],
        _idleStart: 595930,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2398,
        [Symbol(triggerId)]: 2397
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/users',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/users',
      path: '/users',
      href: '/users',
      _raw: '/users'
    },
    params: {},
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/users', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
