Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 110,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 52350,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 150,
      [Symbol(triggerId)]: 112
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 110,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 52350,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 150,
      [Symbol(triggerId)]: 112
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 110,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 52350,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 150,
        [Symbol(triggerId)]: 112
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 110,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 52350,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 150,
        [Symbol(triggerId)]: 112
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTg0MjU2LCJleHAiOjE2MzE3ODkwNTZ9.3lcR_egMQ9Pu7J3tYAnJ_rOhlPac3mRU9VyHo4urEhM',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTg0MjU2LCJleHAiOjE2MzE3ODkwNTZ9.3lcR_egMQ9Pu7J3tYAnJ_rOhlPac3mRU9VyHo4urEhM',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 110,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 52350,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 150,
        [Symbol(triggerId)]: 112
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 128,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 52399,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 166,
      [Symbol(triggerId)]: 130
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 128,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 52399,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 166,
      [Symbol(triggerId)]: 130
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 128,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 52399,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 166,
        [Symbol(triggerId)]: 130
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 128,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 52399,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 166,
        [Symbol(triggerId)]: 130
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTg0MjU2LCJleHAiOjE2MzE3ODkwNTZ9.3lcR_egMQ9Pu7J3tYAnJ_rOhlPac3mRU9VyHo4urEhM',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTg0MjU2LCJleHAiOjE2MzE3ODkwNTZ9.3lcR_egMQ9Pu7J3tYAnJ_rOhlPac3mRU9VyHo4urEhM',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 128,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 52399,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 166,
        [Symbol(triggerId)]: 130
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 110,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 52416,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 181,
      [Symbol(triggerId)]: 112
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 110,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 52416,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 181,
      [Symbol(triggerId)]: 112
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 110,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 52416,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 181,
        [Symbol(triggerId)]: 112
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 110,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 52416,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 181,
        [Symbol(triggerId)]: 112
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTg0MjU2LCJleHAiOjE2MzE3ODkwNTZ9.3lcR_egMQ9Pu7J3tYAnJ_rOhlPac3mRU9VyHo4urEhM',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTg0MjU2LCJleHAiOjE2MzE3ODkwNTZ9.3lcR_egMQ9Pu7J3tYAnJ_rOhlPac3mRU9VyHo4urEhM',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 110,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 52416,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 181,
        [Symbol(triggerId)]: 112
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 81,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 22946,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 95,
      [Symbol(triggerId)]: 83
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 81,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 22946,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 95,
      [Symbol(triggerId)]: 83
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 81,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 22946,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 95,
        [Symbol(triggerId)]: 83
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 81,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 22946,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 95,
        [Symbol(triggerId)]: 83
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4MjE4LCJleHAiOjE2MzE4MDMwMTh9._Nw4Wa9tpTA7PUdFGSEyI3Syue9_gTnhhxynxmg709s',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 81,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 22946,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 95,
        [Symbol(triggerId)]: 83
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
isPasswordValid = true
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 620,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 30889,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 657,
      [Symbol(triggerId)]: 622
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 620,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 30889,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 657,
      [Symbol(triggerId)]: 622
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 620,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 30889,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 657,
        [Symbol(triggerId)]: 622
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 620,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 30889,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 657,
        [Symbol(triggerId)]: 622
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 620,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 30889,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 657,
        [Symbol(triggerId)]: 622
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1201,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 34670,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1214,
      [Symbol(triggerId)]: 1203
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1201,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 34670,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1214,
      [Symbol(triggerId)]: 1203
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1201,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 34670,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1214,
        [Symbol(triggerId)]: 1203
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1201,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 34670,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1214,
        [Symbol(triggerId)]: 1203
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1201,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 34670,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1214,
        [Symbol(triggerId)]: 1203
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1201,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 34725,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1234,
      [Symbol(triggerId)]: 1203
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1201,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 34725,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1234,
      [Symbol(triggerId)]: 1203
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1201,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 34725,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1234,
        [Symbol(triggerId)]: 1203
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1201,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 34725,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1234,
        [Symbol(triggerId)]: 1203
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1201,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 34725,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1234,
        [Symbol(triggerId)]: 1203
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1201,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 34775,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1254,
      [Symbol(triggerId)]: 1203
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1201,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 34775,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1254,
      [Symbol(triggerId)]: 1203
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1201,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 34775,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1254,
        [Symbol(triggerId)]: 1203
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1201,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 34775,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1254,
        [Symbol(triggerId)]: 1203
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1201,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 34775,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1254,
        [Symbol(triggerId)]: 1203
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1285,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 43051,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1299,
      [Symbol(triggerId)]: 1287
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1285,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 43051,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1299,
      [Symbol(triggerId)]: 1287
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1285,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 43051,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1299,
        [Symbol(triggerId)]: 1287
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1285,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 43051,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1299,
        [Symbol(triggerId)]: 1287
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1285,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 43051,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1299,
        [Symbol(triggerId)]: 1287
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 44232,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1853,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 44232,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1853,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 44232,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1853,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 44232,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1853,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 44232,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1853,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 44279,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1873,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 44279,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1873,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 44279,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1873,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 44279,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1873,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 44279,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1873,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 44318,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1893,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 44318,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1893,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 44318,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1893,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 44318,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1893,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 44318,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1893,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 45086,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1914,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 45086,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1914,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45086,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1914,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45086,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1914,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45086,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1914,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 45748,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2232,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 45748,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2232,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45748,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2232,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45748,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2232,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45748,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2232,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 45786,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2252,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 45786,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2252,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45786,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2252,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45786,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2252,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45786,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2252,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 45846,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2272,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 45846,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2272,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45846,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2272,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45846,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2272,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 45846,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2272,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 46364,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2293,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 46364,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2293,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 46364,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2293,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 46364,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2293,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 46364,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2293,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 46962,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2610,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 46962,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2610,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 46962,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2610,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 46962,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2610,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 46962,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2610,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 46996,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2631,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 46996,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2631,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 46996,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2631,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 46996,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2631,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 46996,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2631,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 47027,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2651,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 47027,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2651,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 47027,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2651,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 47027,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2651,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 47027,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2651,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 47516,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2671,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 47516,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2671,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 47516,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2671,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 47516,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2671,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 47516,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2671,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 48134,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2989,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 48134,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 2989,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48134,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2989,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48134,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2989,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48134,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 2989,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 48167,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3009,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 48167,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3009,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48167,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3009,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48167,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3009,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48167,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3009,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 48202,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3029,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 48202,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3029,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48202,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3029,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48202,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3029,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48202,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3029,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 48638,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3060,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1831,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 48638,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3060,
      [Symbol(triggerId)]: 1833
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48638,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3060,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48638,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3060,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1831,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 48638,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3060,
        [Symbol(triggerId)]: 1833
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3594,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49725,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3616,
      [Symbol(triggerId)]: 3596
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3594,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49725,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3616,
      [Symbol(triggerId)]: 3596
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3594,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49725,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3616,
        [Symbol(triggerId)]: 3596
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3594,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49725,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3616,
        [Symbol(triggerId)]: 3596
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3594,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49725,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3616,
        [Symbol(triggerId)]: 3596
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3594,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49762,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3636,
      [Symbol(triggerId)]: 3596
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3594,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49762,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3636,
      [Symbol(triggerId)]: 3596
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3594,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49762,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3636,
        [Symbol(triggerId)]: 3596
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3594,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49762,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3636,
        [Symbol(triggerId)]: 3596
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3594,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49762,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3636,
        [Symbol(triggerId)]: 3596
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3594,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49794,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3656,
      [Symbol(triggerId)]: 3596
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3594,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49794,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3656,
      [Symbol(triggerId)]: 3596
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3594,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49794,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3656,
        [Symbol(triggerId)]: 3596
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3594,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49794,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3656,
        [Symbol(triggerId)]: 3596
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3594,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49794,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3656,
        [Symbol(triggerId)]: 3596
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3767,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 138401,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3781,
      [Symbol(triggerId)]: 3769
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 3767,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 138401,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 3781,
      [Symbol(triggerId)]: 3769
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3767,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 138401,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3781,
        [Symbol(triggerId)]: 3769
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3767,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 138401,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3781,
        [Symbol(triggerId)]: 3769
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 3767,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 138401,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 3781,
        [Symbol(triggerId)]: 3769
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4325,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 140852,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4338,
      [Symbol(triggerId)]: 4327
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4325,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 140852,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4338,
      [Symbol(triggerId)]: 4327
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 140852,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4338,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 140852,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4338,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 140852,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4338,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4325,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 140891,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4358,
      [Symbol(triggerId)]: 4327
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4325,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 140891,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4358,
      [Symbol(triggerId)]: 4327
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 140891,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4358,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 140891,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4358,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 140891,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4358,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4325,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 140935,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4378,
      [Symbol(triggerId)]: 4327
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4325,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 140935,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4378,
      [Symbol(triggerId)]: 4327
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 140935,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4378,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 140935,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4378,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 140935,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4378,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4325,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 143056,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4400,
      [Symbol(triggerId)]: 4327
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4325,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 143056,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4400,
      [Symbol(triggerId)]: 4327
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 143056,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4400,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 143056,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4400,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4325,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 143056,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4400,
        [Symbol(triggerId)]: 4327
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4733,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 145868,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4759,
      [Symbol(triggerId)]: 4735
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4733,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 145868,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4759,
      [Symbol(triggerId)]: 4735
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 145868,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4759,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 145868,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4759,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 145868,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4759,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4733,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 145905,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4779,
      [Symbol(triggerId)]: 4735
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4733,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 145905,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4779,
      [Symbol(triggerId)]: 4735
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 145905,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4779,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 145905,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4779,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 145905,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4779,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4733,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 145944,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4799,
      [Symbol(triggerId)]: 4735
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4733,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 145944,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4799,
      [Symbol(triggerId)]: 4735
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 145944,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4799,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 145944,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4799,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 145944,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4799,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4733,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 147245,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4831,
      [Symbol(triggerId)]: 4735
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 4733,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 147245,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 4831,
      [Symbol(triggerId)]: 4735
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 147245,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4831,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 147245,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4831,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 4733,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 147245,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 4831,
        [Symbol(triggerId)]: 4735
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5374,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 153298,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5396,
      [Symbol(triggerId)]: 5376
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5374,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 153298,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5396,
      [Symbol(triggerId)]: 5376
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 153298,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5396,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 153298,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5396,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 153298,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5396,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5374,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 153336,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5416,
      [Symbol(triggerId)]: 5376
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5374,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 153336,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5416,
      [Symbol(triggerId)]: 5376
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 153336,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5416,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 153336,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5416,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 153336,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5416,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5374,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 153374,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5436,
      [Symbol(triggerId)]: 5376
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5374,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 153374,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5436,
      [Symbol(triggerId)]: 5376
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 153374,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5436,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 153374,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5436,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 153374,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5436,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5374,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 156962,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5471,
      [Symbol(triggerId)]: 5376
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 5374,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 156962,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 5471,
      [Symbol(triggerId)]: 5376
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 156962,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5471,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 156962,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5471,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMTk4ODg4LCJleHAiOjE2MzE4MDM2ODh9.-yOWZbTdmCzZWUvmynIid5TgN2aR9mkJwjKUDFWfBJs',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 5374,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 156962,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 5471,
        [Symbol(triggerId)]: 5376
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 67,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 9332,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 81,
      [Symbol(triggerId)]: 69
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 67,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 9332,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 81,
      [Symbol(triggerId)]: 69
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 67,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 9332,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 81,
        [Symbol(triggerId)]: 69
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 67,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 9332,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 81,
        [Symbol(triggerId)]: 69
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 67,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 9332,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 81,
        [Symbol(triggerId)]: 69
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 114,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 11618,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 136,
      [Symbol(triggerId)]: 116
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 114,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 11618,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 136,
      [Symbol(triggerId)]: 116
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 114,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 11618,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 136,
        [Symbol(triggerId)]: 116
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 114,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 11618,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 136,
        [Symbol(triggerId)]: 116
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 114,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 11618,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 136,
        [Symbol(triggerId)]: 116
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 110,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 11637,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 151,
      [Symbol(triggerId)]: 112
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 110,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 11637,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 151,
      [Symbol(triggerId)]: 112
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 110,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 11637,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 151,
        [Symbol(triggerId)]: 112
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 110,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 11637,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 151,
        [Symbol(triggerId)]: 112
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 110,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 11637,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 151,
        [Symbol(triggerId)]: 112
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 114,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 11657,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 166,
      [Symbol(triggerId)]: 116
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 114,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 11657,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 166,
      [Symbol(triggerId)]: 116
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 114,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 11657,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 166,
        [Symbol(triggerId)]: 116
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 114,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 11657,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 166,
        [Symbol(triggerId)]: 116
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 114,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 11657,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 166,
        [Symbol(triggerId)]: 116
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 236,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 26698,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 258,
      [Symbol(triggerId)]: 238
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 236,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 26698,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 258,
      [Symbol(triggerId)]: 238
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 236,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 26698,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 258,
        [Symbol(triggerId)]: 238
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 236,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 26698,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 258,
        [Symbol(triggerId)]: 238
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 236,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 26698,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 258,
        [Symbol(triggerId)]: 238
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 232,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 26716,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 273,
      [Symbol(triggerId)]: 234
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 232,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 26716,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 273,
      [Symbol(triggerId)]: 234
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 232,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 26716,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 273,
        [Symbol(triggerId)]: 234
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 232,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 26716,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 273,
        [Symbol(triggerId)]: 234
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 232,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 26716,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 273,
        [Symbol(triggerId)]: 234
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 236,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 26735,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 288,
      [Symbol(triggerId)]: 238
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 4,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 236,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [Timeout],
      _idleStart: 26735,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 288,
      [Symbol(triggerId)]: 238
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 236,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 26735,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 288,
        [Symbol(triggerId)]: 238
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 236,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 26735,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 288,
        [Symbol(triggerId)]: 238
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 236,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [Timeout],
        _idleStart: 26735,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 288,
        [Symbol(triggerId)]: 238
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 78,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 20264,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 92,
      [Symbol(triggerId)]: 80
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 78,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 20264,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 92,
      [Symbol(triggerId)]: 80
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 78,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 20264,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 92,
        [Symbol(triggerId)]: 80
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 78,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 20264,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 92,
        [Symbol(triggerId)]: 80
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 78,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 20264,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 92,
        [Symbol(triggerId)]: 80
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 622,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 21935,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 648,
      [Symbol(triggerId)]: 624
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 622,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 21935,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 648,
      [Symbol(triggerId)]: 624
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 622,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 21935,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 648,
        [Symbol(triggerId)]: 624
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 622,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 21935,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 648,
        [Symbol(triggerId)]: 624
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 622,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 21935,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 648,
        [Symbol(triggerId)]: 624
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 622,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 22007,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 668,
      [Symbol(triggerId)]: 624
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 622,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 22007,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 668,
      [Symbol(triggerId)]: 624
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 622,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 22007,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 668,
        [Symbol(triggerId)]: 624
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 622,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 22007,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 668,
        [Symbol(triggerId)]: 624
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 622,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 22007,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 668,
        [Symbol(triggerId)]: 624
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 622,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 22059,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 688,
      [Symbol(triggerId)]: 624
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 622,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 22059,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 688,
      [Symbol(triggerId)]: 624
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 622,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 22059,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 688,
        [Symbol(triggerId)]: 624
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 622,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 22059,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 688,
        [Symbol(triggerId)]: 624
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 622,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 22059,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 688,
        [Symbol(triggerId)]: 624
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
Executing (default): CREATE TABLE IF NOT EXISTS `Blogs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `title` VARCHAR(255), `thumbnail` VARCHAR(255), `pictures` VARCHAR(255), `content` TEXT, `category` VARCHAR(255), `status` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Blogs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Comments` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `blogId` VARCHAR(255), `comment` TEXT, `userId` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Comments`)
Executing (default): CREATE TABLE IF NOT EXISTS `PVs` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `Alias` TEXT, `Time` TEXT, `Status` TEXT, `Vpv1` REAL, `Ipv1` REAL, `Ppv1` REAL, `Vpv2` REAL, `Ppv2` REAL, `Ipv2` REAL, `Vac` REAL, `Iac` REAL, `Fac` REAL, `Pac` REAL, `PacR` REAL, `Temperature` REAL, `Eac_today` REAL, `Eac_total` REAL, `T_total` REAL, `IPM_Temperature` REAL, `P_BUS_Voltage` REAL, `Power_Factor` REAL, `Epv1_today` REAL, `Epv1_total` REAL, `Epv2_total` REAL, `Epv_total` REAL, `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`PVs`)
Executing (default): CREATE TABLE IF NOT EXISTS `Users` (`id` INTEGER PRIMARY KEY AUTOINCREMENT, `username` VARCHAR(255), `gender` VARCHAR(255), `email` VARCHAR(255), `password` VARCHAR(255), `name` VARCHAR(255), `lastname` VARCHAR(255), `address` VARCHAR(255), `city` VARCHAR(255), `country` VARCHAR(255), `zipCode` VARCHAR(255), `about` VARCHAR(255), `workplace` VARCHAR(255), `position` VARCHAR(255), `province` VARCHAR(255), `status` VARCHAR(255), `img` VARCHAR(255), `createdAt` DATETIME NOT NULL, `updatedAt` DATETIME NOT NULL);
Executing (default): PRAGMA INDEX_LIST(`Users`)
Server running on 8081
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 105,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 47663,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 119,
      [Symbol(triggerId)]: 107
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 105,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 47663,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 119,
      [Symbol(triggerId)]: 107
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 105,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 47663,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 119,
        [Symbol(triggerId)]: 107
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 105,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 47663,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 119,
        [Symbol(triggerId)]: 107
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 105,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 47663,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 119,
        [Symbol(triggerId)]: 107
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 652,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49158,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 674,
      [Symbol(triggerId)]: 654
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 652,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49158,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 674,
      [Symbol(triggerId)]: 654
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 652,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49158,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 674,
        [Symbol(triggerId)]: 654
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 652,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49158,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 674,
        [Symbol(triggerId)]: 654
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 652,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49158,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 674,
        [Symbol(triggerId)]: 654
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 652,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49231,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 694,
      [Symbol(triggerId)]: 654
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 652,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49231,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 694,
      [Symbol(triggerId)]: 654
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 652,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49231,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 694,
        [Symbol(triggerId)]: 654
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 652,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49231,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 694,
        [Symbol(triggerId)]: 654
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 652,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49231,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 694,
        [Symbol(triggerId)]: 654
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 652,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49288,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 714,
      [Symbol(triggerId)]: 654
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 652,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 49288,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 714,
      [Symbol(triggerId)]: 654
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 652,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49288,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 714,
        [Symbol(triggerId)]: 654
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 652,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49288,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 714,
        [Symbol(triggerId)]: 654
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyNDE4LCJleHAiOjE2MzE4MDcyMTh9.N2hmCaejCxBTOuNwizT7lzg26MPN26Z3L4RIgfNpk_o',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 652,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 49288,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 714,
        [Symbol(triggerId)]: 654
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`username` = 'sgtech' LIMIT 1;
isPasswordValid = true
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 761,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 72969,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 797,
      [Symbol(triggerId)]: 763
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 1,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 761,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 72969,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 797,
      [Symbol(triggerId)]: 763
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 761,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 72969,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 797,
        [Symbol(triggerId)]: 763
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 761,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 72969,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 797,
        [Symbol(triggerId)]: 763
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyODMwLCJleHAiOjE2MzE4MDc2MzB9.1cb52xwIDiGaJQPK4WGQ7D6BK4LaQzeedVc3aQ0nn7Q',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyODMwLCJleHAiOjE2MzE4MDc2MzB9.1cb52xwIDiGaJQPK4WGQ7D6BK4LaQzeedVc3aQ0nn7Q',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"2-l9Fw4VUO7kr8CvBlt4zaMCqXZ0w"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2021-09-09',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 761,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 72969,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 797,
        [Symbol(triggerId)]: 763
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2021-09-09',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2021-09-09',
      path: '/PVDATE/2021-09-09',
      href: '/PVDATE/2021-09-09',
      _raw: '/PVDATE/2021-09-09'
    },
    params: { date: '2021-09-09' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-10-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-11-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-12-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-01-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-02-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-03-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-04-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-05-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-06-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-07-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-08-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2017-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2018-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2019-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2020-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-09%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2021-09-08%';
0
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '2021-09-%';
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '8-%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1336,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 80059,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1362,
      [Symbol(triggerId)]: 1338
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1336,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 80059,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1362,
      [Symbol(triggerId)]: 1338
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1336,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 80059,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1362,
        [Symbol(triggerId)]: 1338
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1336,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 80059,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1362,
        [Symbol(triggerId)]: 1338
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyODMwLCJleHAiOjE2MzE4MDc2MzB9.1cb52xwIDiGaJQPK4WGQ7D6BK4LaQzeedVc3aQ0nn7Q',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyODMwLCJleHAiOjE2MzE4MDc2MzB9.1cb52xwIDiGaJQPK4WGQ7D6BK4LaQzeedVc3aQ0nn7Q',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1336,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 80059,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1362,
        [Symbol(triggerId)]: 1338
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1336,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 80118,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1382,
      [Symbol(triggerId)]: 1338
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1336,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 80118,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1382,
      [Symbol(triggerId)]: 1338
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1336,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 80118,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1382,
        [Symbol(triggerId)]: 1338
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1336,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 80118,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1382,
        [Symbol(triggerId)]: 1338
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyODMwLCJleHAiOjE2MzE4MDc2MzB9.1cb52xwIDiGaJQPK4WGQ7D6BK4LaQzeedVc3aQ0nn7Q',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyODMwLCJleHAiOjE2MzE4MDc2MzB9.1cb52xwIDiGaJQPK4WGQ7D6BK4LaQzeedVc3aQ0nn7Q',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1336,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 80118,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1382,
        [Symbol(triggerId)]: 1338
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
*** user data ***
ServerResponse {
  _events: [Object: null prototype] {
    finish: [ [Function: bound resOnFinish], [Function] ]
  },
  _eventsCount: 1,
  _maxListeners: undefined,
  outputData: [],
  outputSize: 0,
  writable: true,
  _last: false,
  chunkedEncoding: false,
  shouldKeepAlive: true,
  useChunkedEncodingByDefault: true,
  sendDate: true,
  _removedConnection: false,
  _removedContLen: false,
  _removedTE: false,
  _contentLength: null,
  _hasBody: true,
  _trailer: '',
  finished: false,
  _headerSent: false,
  socket: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1336,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 80173,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1402,
      [Symbol(triggerId)]: 1338
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  connection: Socket {
    connecting: false,
    _hadError: false,
    _parent: null,
    _host: null,
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: true,
      ended: false,
      endEmitted: false,
      reading: true,
      sync: false,
      needReadable: true,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: false,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: false,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: false
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Array],
      timeout: [Function: socketOnTimeout],
      data: [Function: bound socketOnData],
      error: [Function: socketOnError],
      close: [Array],
      drain: [Function: bound socketOnDrain],
      resume: [Function: onSocketResume],
      pause: [Function: onSocketPause]
    },
    _eventsCount: 8,
    _maxListeners: undefined,
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: false,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: false,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: false,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    allowHalfOpen: true,
    _sockname: null,
    _pendingData: null,
    _pendingEncoding: '',
    server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    _server: Server {
      insecureHTTPParser: undefined,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _connections: 3,
      _handle: [TCP],
      _usingWorkers: false,
      _workers: [],
      _unref: false,
      allowHalfOpen: true,
      pauseOnConnect: false,
      httpAllowHalfOpen: false,
      timeout: 120000,
      keepAliveTimeout: 5000,
      maxHeadersCount: null,
      headersTimeout: 60000,
      _connectionKey: '6::::8081',
      [Symbol(IncomingMessage)]: [Function: IncomingMessage],
      [Symbol(ServerResponse)]: [Function: ServerResponse],
      [Symbol(kCapture)]: false,
      [Symbol(asyncId)]: 57
    },
    timeout: 120000,
    parser: HTTPParser {
      '0': [Function: parserOnHeaders],
      '1': [Function: parserOnHeadersComplete],
      '2': [Function: parserOnBody],
      '3': [Function: parserOnMessageComplete],
      '4': [Function: bound onParserExecute],
      _headers: [],
      _url: '',
      socket: [Circular],
      incoming: [IncomingMessage],
      outgoing: null,
      maxHeaderPairs: 2000,
      _consumed: true,
      onIncoming: [Function: bound parserOnIncoming],
      parsingHeadersStart: 0,
      [Symbol(resource_symbol)]: [HTTPServerAsyncResource]
    },
    on: [Function: socketListenerWrap],
    addListener: [Function: socketListenerWrap],
    prependListener: [Function: socketListenerWrap],
    _paused: false,
    _httpMessage: [Circular],
    [Symbol(asyncId)]: 1336,
    [Symbol(kHandle)]: TCP {
      reading: true,
      onconnection: null,
      _consumed: true,
      [Symbol(owner_symbol)]: [Circular]
    },
    [Symbol(kSetNoDelay)]: false,
    [Symbol(lastWriteQueueSize)]: 0,
    [Symbol(timeout)]: Timeout {
      _idleTimeout: 120000,
      _idlePrev: [TimersList],
      _idleNext: [TimersList],
      _idleStart: 80173,
      _onTimeout: [Function: bound ],
      _timerArgs: undefined,
      _repeat: null,
      _destroyed: false,
      [Symbol(refed)]: false,
      [Symbol(asyncId)]: 1402,
      [Symbol(triggerId)]: 1338
    },
    [Symbol(kBuffer)]: null,
    [Symbol(kBufferCb)]: null,
    [Symbol(kBufferGen)]: null,
    [Symbol(kCapture)]: false,
    [Symbol(kBytesRead)]: 0,
    [Symbol(kBytesWritten)]: 0
  },
  _header: null,
  _onPendingData: [Function: bound updateOutgoingData],
  _sent100: false,
  _expect_continue: false,
  req: IncomingMessage {
    _readableState: ReadableState {
      objectMode: false,
      highWaterMark: 16384,
      buffer: BufferList { head: null, tail: null, length: 0 },
      length: 0,
      pipes: null,
      pipesCount: 0,
      flowing: null,
      ended: false,
      endEmitted: false,
      reading: false,
      sync: true,
      needReadable: false,
      emittedReadable: false,
      readableListening: false,
      resumeScheduled: false,
      emitClose: true,
      autoDestroy: false,
      destroyed: false,
      defaultEncoding: 'utf8',
      awaitDrainWriters: null,
      multiAwaitDrain: false,
      readingMore: true,
      decoder: null,
      encoding: null,
      [Symbol(kPaused)]: null
    },
    readable: true,
    _events: [Object: null prototype] {
      end: [Function: resetHeadersTimeoutOnReqEnd]
    },
    _eventsCount: 1,
    _maxListeners: undefined,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1336,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 80173,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1402,
        [Symbol(triggerId)]: 1338
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1336,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 80173,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1402,
        [Symbol(triggerId)]: 1338
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    httpVersionMajor: 1,
    httpVersionMinor: 1,
    httpVersion: '1.1',
    complete: false,
    headers: {
      host: 'localhost:8081',
      connection: 'keep-alive',
      'sec-ch-ua': '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      accept: 'application/json, text/plain, */*',
      authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyODMwLCJleHAiOjE2MzE4MDc2MzB9.1cb52xwIDiGaJQPK4WGQ7D6BK4LaQzeedVc3aQ0nn7Q',
      'sec-ch-ua-mobile': '?0',
      'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform': '"Windows"',
      origin: 'http://localhost',
      'sec-fetch-site': 'same-site',
      'sec-fetch-mode': 'cors',
      'sec-fetch-dest': 'empty',
      referer: 'http://localhost/',
      'accept-encoding': 'gzip, deflate, br',
      'accept-language': 'th-TH,th;q=0.9,en;q=0.8',
      'if-none-match': 'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    },
    rawHeaders: [
      'Host',
      'localhost:8081',
      'Connection',
      'keep-alive',
      'sec-ch-ua',
      '"Google Chrome";v="93", " Not;A Brand";v="99", "Chromium";v="93"',
      'Accept',
      'application/json, text/plain, */*',
      'Authorization',
      'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MTcsInVzZXJuYW1lIjoic2d0ZWNoIiwiZ2VuZGVyIjpudWxsLCJlbWFpbCI6bnVsbCwicGFzc3dvcmQiOiIkMmEkMDgkR0s5MEI3WnhmaGttTDVMMkVQbjE1dThPUmhFZlFNbEVEUEtjV05yT1ZpN3lGcjRzS2dtYVciLCJuYW1lIjpudWxsLCJsYXN0bmFtZSI6bnVsbCwiYWRkcmVzcyI6bnVsbCwiY2l0eSI6bnVsbCwiY291bnRyeSI6bnVsbCwiemlwQ29kZSI6bnVsbCwiYWJvdXQiOm51bGwsIndvcmtwbGFjZSI6bnVsbCwicG9zaXRpb24iOm51bGwsInByb3ZpbmNlIjpudWxsLCJzdGF0dXMiOm51bGwsImltZyI6ImljX3Byb2ZpbGUucG5nIiwiY3JlYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwidXBkYXRlZEF0IjoiMjAyMS0wOS0wOVQwOToxODoyOC41MTZaIiwiaWF0IjoxNjMxMjAyODMwLCJleHAiOjE2MzE4MDc2MzB9.1cb52xwIDiGaJQPK4WGQ7D6BK4LaQzeedVc3aQ0nn7Q',
      'sec-ch-ua-mobile',
      '?0',
      'User-Agent',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/93.0.4577.63 Safari/537.36',
      'sec-ch-ua-platform',
      '"Windows"',
      'Origin',
      'http://localhost',
      'Sec-Fetch-Site',
      'same-site',
      'Sec-Fetch-Mode',
      'cors',
      'Sec-Fetch-Dest',
      'empty',
      'Referer',
      'http://localhost/',
      'Accept-Encoding',
      'gzip, deflate, br',
      'Accept-Language',
      'th-TH,th;q=0.9,en;q=0.8',
      'If-None-Match',
      'W/"10b32-B2A0JNyGFi5ALpdEZSG7mjqdhyI"'
    ],
    trailers: {},
    rawTrailers: [],
    aborted: false,
    upgrade: false,
    url: '/PVDATE/2020-09-25',
    method: 'GET',
    statusCode: null,
    statusMessage: null,
    client: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 8,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: true,
      allowHalfOpen: true,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: [Server],
      _server: [Server],
      timeout: 120000,
      parser: [HTTPParser],
      on: [Function: socketListenerWrap],
      addListener: [Function: socketListenerWrap],
      prependListener: [Function: socketListenerWrap],
      _paused: false,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 1336,
      [Symbol(kHandle)]: [TCP],
      [Symbol(kSetNoDelay)]: false,
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: Timeout {
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 80173,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(refed)]: false,
        [Symbol(asyncId)]: 1402,
        [Symbol(triggerId)]: 1338
      },
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kCapture)]: false,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _consuming: false,
    _dumped: false,
    next: [Function: next],
    baseUrl: '',
    originalUrl: '/PVDATE/2020-09-25',
    _parsedUrl: Url {
      protocol: null,
      slashes: null,
      auth: null,
      host: null,
      port: null,
      hostname: null,
      hash: null,
      search: null,
      query: null,
      pathname: '/PVDATE/2020-09-25',
      path: '/PVDATE/2020-09-25',
      href: '/PVDATE/2020-09-25',
      _raw: '/PVDATE/2020-09-25'
    },
    params: { date: '2020-09-25' },
    query: {},
    res: [Circular],
    body: {},
    route: Route { path: '/pvDate/:date', stack: [Array], methods: [Object] },
    [Symbol(kCapture)]: false
  },
  locals: [Object: null prototype] {},
  [Symbol(kCapture)]: false,
  [Symbol(kNeedDrain)]: false,
  [Symbol(corked)]: 0,
  [Symbol(kOutHeaders)]: [Object: null prototype] {
    'x-powered-by': [ 'X-Powered-By', 'Express' ],
    'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ]
  }
}
Executing (default): SELECT `id`, `username`, `gender`, `email`, `password`, `name`, `lastname`, `address`, `city`, `country`, `zipCode`, `about`, `workplace`, `position`, `province`, `status`, `img`, `createdAt`, `updatedAt` FROM `Users` AS `User` WHERE `User`.`email` IS NULL LIMIT 1;
Executing (default): SELECT `id`, `Alias`, `Time`, `Status`, `Vpv1`, `Ipv1`, `Ppv1`, `Vpv2`, `Ppv2`, `Ipv2`, `Vac`, `Iac`, `Fac`, `Pac`, `PacR`, `Temperature`, `Eac_today`, `Eac_total`, `T_total`, `IPM_Temperature`, `P_BUS_Voltage`, `Power_Factor`, `Epv1_today`, `Epv1_total`, `Epv2_total`, `Epv_total`, `createdAt`, `updatedAt` FROM `PVs` AS `PV` WHERE `PV`.`Time` LIKE '%2020-09-25%';
